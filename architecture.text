%%%%%%%%%%%%%%%%%%
%% WebRTC Architecture

Title: WebRTC Architecture
Author: Victor Klos & Eelco Cramer


WebRTC Architecture
===================

We will be looking at:

* Networking
* Codecs


Networking
==========

![ Internet Communications ](figures/internet%20comms.svg "Internet communications")


A client connects
=================

![ Internet Communications ](figures/internet%20comms.svg "Internet communications")


Two clients connect
===================

![ Internet Communications ](figures/internet%20comms.svg "Internet communications")


In the home network
===================

![ Home Networking ](figures/home%20network.svg "Home Networking")


Client connects to server
=========================

![ Home Networking ](figures/home%20network.svg "Home Networking")


The gateway performs NAT
========================

![ Home Networking ](figures/home%20network.svg "Home Networking")


And keeps administration up-to-date
===================================

![ Home Networking ](figures/home%20network.svg "Home Networking")


Peer-to-peer won't work
=======================

![ Internet Communications ](figures/internet%20comms.svg "Internet communications")


STUN to the rescue
==================

[STUN][] - Session Traversal Utilities for NAT

<br/>

Have an external server answer the questions:

* "What is my external IP?"
* "What is my external port?"

<br/>

```javascript
var ice = {"iceServers": [
    {"url": "stun:23.21.150.121"},
    {"url": "stun:stun.l.google.com:19302"},
]};
```


Sometimes it just doesn't work
==============================

Then use [TURN][] - Traversal Using Relays around NAT

&rArr; Traffic is **relayed**, no longer P2P!

<br/>

```javascript
var ice = {"iceServers": [
    {"url": "stun:23.21.150.121"},
    {"url": "stun:stun.l.google.com:19302"},
    {"url": "turn:user@turnserver.com", "account": "********"}
]};
```

WebRTC simplifies with ICE
==========================

[ICE][] - Interactive Connectivity Establishment

<br/>

Finds a `PeerConnection` for you

* on the local network
* using STUN
* using TURN


Security
========

W3C WebRTC working group requires all transmissions to be **encrypted**

* Media
* Data
* Control

For UDP media traffic solutions are available, e.g. [SRTP][]. For
_connection-oriented_ traffic, [DTLS][] was invented.


TCP versus UDP
=====================================

{% left %}

### TCP

* Connection oriented
* with ordering
* and retransmissions
* and congestion control

{% end %}

{% right %}

### UDP

* Connection-less
* without ordering
* without retransmissions
* no congestion control
* Fire-and-forget

{% end %}



[SRTP]: https://www.ietf.org/rfc/rfc3711.txt "Secure RealTime Protocol"
[DTLS]: https://www.ietf.org/rfc/rfc4347.txt "Datagram Transport Layer Security"
[STUN]: https://www.ietf.org/rfc/rfc5389.txt "Session Traversal Utilities for NAT"
[TURN]: https://www.ietf.org/rfc/rfc5766.txt "Traversal Using Relays around NAT"
[ICE]:  https://www.ietf.org/rfc/rfc5245.txt "Interactive Connectivity Establishment"
