%%%%%%%%%%%%%%%%%%
%% WebRTC Architecture

Title: WebRTC Architecture
Author: Victor Klos & Eelco Cramer


WebRTC Architecture
===================

We will be looking at:

* Networking
* Protocol stack
* Codec Negotiation
* Case: Video Conferencing


TCP versus UDP
==============

{% left %}

TCP

* Connection oriented
* with ordering
* and retransmissions
* and congestion control

{% end %}

{% right %}

UDP

* Connection-less
* without ordering
* without retransmissions
* no congestion control

<br/>
&rArr; Fire-and-forget

{% end %}


Networking
==========

![Internet Communications](figures/internet%20comms-0.svg "Internet communications")


A client connects
=================

![Internet Communications](figures/internet%20comms-1.svg "Internet communications")


Second clients connects
=======================

![Internet Communications](figures/internet%20comms-2.svg "Internet communications")


In the home network
===================

![Home Networking](figures/home%20network-0.svg "Home Networking")


Client connects to server
=========================

![Home Networking](figures/home%20network-1.svg "Home Networking")


The gateway performs NAT
========================

![Home Networking](figures/home%20network-2.svg "Home Networking")


And does housekeeping
======================

![Home Networking](figures/home%20network-3.svg "Home Networking")


Peer-to-peer TCP won't work
===========================

![Internet Communications](figures/internet%20comms-3.svg "Internet communications")


STUN to the rescue
==================

[STUN][] - Session Traversal Utilities for NAT

<br/>

Have an external server answer the questions:

* "What is my external IP?"
* "What is my external port?"

<br/>

```javascript
var ice = {"iceServers": [
    {"url": "stun:23.21.150.121"},
    {"url": "stun:stun.l.google.com:19302"},
]};
```


Bad Luck
========

Sometimes a connection fails:

* (company) firewall
* WiFi without client interconnect
* network topologies

<br/>

Then use [TURN][] - Traversal Using Relays around NAT

&rArr; Traffic is **relayed**, no longer P2P!

```javascript
var ice = {"iceServers": [
    {"url": "stun:23.21.150.121"},
    {"url": "stun:stun.l.google.com:19302"},
    {"url": "turn:user@turnserver.com", "account": "********"}
]};
```

WebRTC simplifies with ICE
==========================

[ICE][] - Interactive Connectivity Establishment

<br/>

Finds a `PeerConnection` for you

* on the local network
* using STUN
* using TURN


Security
========

W3C WebRTC working group requires all transmissions to be **encrypted**

* Media
* Data
* Control

For UDP media traffic solutions are available, e.g. [SRTP][]. For
_connection-oriented_ traffic, [DTLS][] was invented.


WebRTC protocol stack
=====================

![WebRTC Protocol Stack](figures/WebRTC%20protocol%20stack.png "WebRTC protocol stack")

<smaller>Source: HPBN, Ilya Grigorik, ISBN 9781449344764</smaller>


[SDP][]
=======
```
Session description
    v=  (protocol version number, currently only 0)
    o=  (originator and session identifier : username, id, version number, network address)
    s=  (session name : mandatory with at least one UTF-8-encoded character)
    i=* (session title or short information)
    u=* (URI of description)
    e=* (zero or more email address with optional name of contacts)
    p=* (zero or more phone number with optional name of contacts)
    c=* (connection information—not required if included in all media)
    b=* (zero or more bandwidth information lines)
    One or more Time descriptions ("t=" and "r=" lines; see below)
    z=* (time zone adjustments)
    k=* (encryption key)
    a=* (zero or more session attribute lines)
    Zero or more Media descriptions (each one starting by an "m=" line; see below)
```


SDP (cont'd)
============
```
Time description (mandatory)
    t=  (time the session is active)
    r=* (zero or more repeat times)

Media description (if present)
    m=  (media name and transport address)
    i=* (media title or information field)
    c=* (connection information — optional if included at session level)
    b=* (zero or more bandwidth information lines)
    k=* (encryption key)
    a=* (zero or more media attribute lines — overriding the Session attribute lines)

```


SDP for WebRTC
==============

&rArr; Includes ICE candidates

<br/>

* https://www.ietf.org/rfc/rfc4566.txt (SDP)
* http://tools.ietf.org/html/draft-nandakumar-rtcweb-sdp
* http://webrtchacks.com/anatomy-webrtc-sdp/


Case: Video Conferencing
========================

![Video Conferencing P2P](figures/video%20conf-0.svg "Video conferencing P2P")


Using a media gateway
=====================

![Video conferencing through Media Gateway](figures/video%20conf-1.svg "Video conferencing through Media Gateway")


[SRTP]: https://www.ietf.org/rfc/rfc3711.txt "Secure RealTime Protocol"
[DTLS]: https://www.ietf.org/rfc/rfc4347.txt "Datagram Transport Layer Security"
[STUN]: https://www.ietf.org/rfc/rfc5389.txt "Session Traversal Utilities for NAT"
[TURN]: https://www.ietf.org/rfc/rfc5766.txt "Traversal Using Relays around NAT"
[ICE]:  https://www.ietf.org/rfc/rfc5245.txt "Interactive Connectivity Establishment"
[SDP]:  https://www.ietf.org/rfc/rfc4566.txt "Session Description Protocol"
